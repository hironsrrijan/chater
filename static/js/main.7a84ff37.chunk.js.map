{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","props","isLogin","text","user","className","msg","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","App","useState","input","setInput","setUser","message","setMessage","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","prompt","TextField","id","value","onChange","e","target","label","required","Button","variant","color","onClick","event","preventDefault","add","timestamp","FieldValue","serverTimestamp","console","log","ele","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"gSAmBeA,MAff,SAAiBC,GACb,IAAMC,EAAUD,EAAME,KAAKC,OAASH,EAAMG,KAC1C,OACI,6BACI,4BACI,yBAAKC,UAAWH,EAAS,QAAQ,QAChCD,EAAME,KAAKG,IACZ,0BAAMD,UAAU,QAAQJ,EAAME,KAAKC,U,0BCEjDG,IAASC,cAXU,CACjBC,OAAQ,0CACRC,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IACeC,EADJV,IAASW,YCgDPC,MAtDf,WAAgB,IAAD,EACaC,qBADb,mBACNC,EADM,KACCC,EADD,OAEWF,qBAFX,mBAENhB,EAFM,KAEAmB,EAFA,OAGiBH,mBAAS,IAH1B,mBAGNI,EAHM,KAGGC,EAHH,KAmCb,OA9BAC,qBAAU,WACRT,EAAGU,WAAW,WACbC,QAAQ,YAAY,QACpBC,YAAW,SAAAC,GAAQ,OAClBL,EAAWK,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAEA,EAAIC,gBAExC,IACFR,qBAAU,WACRH,EAAQY,OAAO,6BACf,IAsBA,yBAAK9B,UAAU,OACb,kCAAQD,EAAR,gBACA,8BACE,kBAACgC,EAAA,EAAD,CAAWC,GAAG,iBAAiBC,MAAOjB,EAAOkB,SAAU,SAACC,GAAD,OAAKlB,EAASkB,EAAEC,OAAOH,QAAQI,MAAM,oBAAoBC,UAAQ,IACxH,kBAACC,EAAA,EAAD,CAAQC,QAAQ,WAAWC,MAAM,UAAUC,QAxB7B,SAAAC,GAClBA,EAAMC,iBACO,KAAV5B,GAAwB,KAARjB,GAAuB,OAATA,GAC/Ba,EAAGU,WAAW,WAAWuB,IACvB,CACE9C,KAAKA,EACLE,IAAIe,EACJ8B,UAAU5C,IAASW,UAAUkC,WAAWC,oBAG5C/B,EAAS,KAETgC,QAAQC,IAAI,WAYV,iBAIE/B,EAAQQ,KAAI,SAAAwB,GAAG,OACb,kBAAC,EAAD,CAASrD,KAAMqD,EAAKpD,KAAMA,SCzClBqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMlD,c","file":"static/js/main.7a84ff37.chunk.js","sourcesContent":["import React from 'react';\nimport './Message.css';\n//import Card from '@material-ui/core/Card';\n\nfunction Message(props) {\n    const isLogin = props.text.user === props.user;\n    return(\n        <div>\n            <h1>\n                <div className={isLogin? 'right':'left'}>\n                {props.text.msg}\n                <span className=\"user\">{props.text.user}</span>\n                </div>\n            </h1>\n            \n        </div>\n    );\n}\n\nexport default Message;","import firebase from 'firebase';\n \nvar firebaseConfig = {\n    apiKey: \"AIzaSyBZ9CN8oIgffWD1OQ-rlFcUCnSfyEEDGi0\",\n    authDomain: \"chatapp-28291.firebaseapp.com\",\n    databaseURL: \"https://chatapp-28291.firebaseio.com\",\n    projectId: \"chatapp-28291\",\n    storageBucket: \"chatapp-28291.appspot.com\",\n    messagingSenderId: \"688889504861\",\n    appId: \"1:688889504861:web:b73c3ca81a50ea9caa59b4\",\n    measurementId: \"G-5XJ25Y9W93\"\n  };\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n  const db = firebase.firestore();\n  export default db;","import React,{useState, useEffect} from 'react';\nimport './App.css';\nimport { Button } from '@material-ui/core';\nimport Message from './Message';\nimport TextField from '@material-ui/core/TextField';\nimport db from './firebase';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [input, setInput] = useState();\n  const [user, setUser] = useState();\n  const [message, setMessage] = useState([\n  ]);\n  useEffect(()=>{\n    db.collection('message')\n    .orderBy('timestamp','desc')\n    .onSnapshot(snapshot=>(\n      setMessage(snapshot.docs.map(doc=>doc.data()))\n    ))\n  },[])\n  useEffect(()=>{\n    setUser(prompt('please enter your name'));\n  },[]);\n  //console.log(message);\n  const sendMessage = event =>{\n    event.preventDefault();\n    if(input !== \"\" && user !==\"\" && user !== null){\n      db.collection('message').add(\n        {\n          user:user,\n          msg:input,\n          timestamp:firebase.firestore.FieldValue.serverTimestamp()\n        }\n      )\n      setInput('');\n    }else{\n      console.log('error');\n    }\n    \n  }\n  \n\n\n  return (\n    <div className=\"App\">\n      <h1>Hi {user}, Chat Here!</h1>\n      <form>\n        <TextField id=\"standard-basic\" value={input} onChange={(e)=>setInput(e.target.value)} label=\"Type a message...\" required/>\n        <Button variant=\"outlined\" color=\"primary\" onClick={sendMessage}>Send Message</Button>\n      </form>\n      \n        {\n          message.map(ele=>(\n            <Message text={ele} user={user}/>\n          \n          \n          ))\n        }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}